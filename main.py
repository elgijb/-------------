import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import json
import os
import google.generativeai as genai
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN") or "–í–ê–®_–¢–û–ö–ï–ù_–¢–£–¢"
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY") or "–í–ê–®_GEMINI_API_KEY_–¢–£–¢"

bot = telebot.TeleBot(BOT_TOKEN)

FAQ_FILE = "user_faqs.json"
user_languages = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-pro")

base_faqs = [
    {"question": "–ö–∞–∫–∏–µ –ª—å–≥–æ—Ç—ã –ø–æ–ª–æ–∂–µ–Ω—ã —Ä–∞–Ω–µ–Ω—ã–º —Å–æ–ª–¥–∞—Ç–∞–º?", "answer": "–†–∞–Ω–µ–Ω—ã–º —Å–æ–ª–¥–∞—Ç–∞–º –ø–æ–ª–æ–∂–µ–Ω—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ª—å–≥–æ—Ç—ã."},
    {"question": "–ì–¥–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å —Å —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–µ–π?", "answer": "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –±–ª–∏–∂–∞–π—à–∏–π —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∏–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ."},
    {"question": "–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—Å–æ–±–∏–µ?", "answer": "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –∏–ª–∏ –≤ –ú–§–¶."},
    {"question": "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—å–≥–æ—Ç?", "answer": "–ü–∞—Å–ø–æ—Ä—Ç, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ, —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–æ–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."},
    {"question": "–ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å?", "answer": "–î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤–æ–µ–Ω–Ω–æ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥—É –∏–ª–∏ –≤ —Ü–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–µ—Ç–µ—Ä–∞–Ω–æ–≤."},
    {"question": "–ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è?", "answer": "–≠—Ç–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–µ–ø–µ–Ω–∏ —Ç—Ä–∞–≤–º—ã –∏ —Ç–∏–ø–∞ –ª–µ—á–µ–Ω–∏—è."},
    {"question": "–ï—Å—Ç—å –ª–∏ –ª—å–≥–æ—Ç—ã –¥–ª—è —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏?", "answer": "–î–∞, –¥–ª—è —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ª—å–≥–æ—Ç—ã."},
    {"question": "–ö—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏?", "answer": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–∞—Ö –∏–ª–∏ –ù–ö–û."},
    {"question": "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –∑–∞ –ø–æ—Ç–µ—Ä—é —Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏?", "answer": "–ù—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–æ–º–∏—Å—Å–∏—é –∏ –ø–æ–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –§–°–°."},
    {"question": "–ì–¥–µ –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Ç–∞–∫–∏—Ö –∂–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö?", "answer": "–°—É—â–µ—Å—Ç–≤—É—é—Ç —Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –≥—Ä—É–ø–ø—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö."}
]

user_questions = []
faq_likes = {}

@bot.message_handler(commands=['start'])
def start(message):
    lang_keyboard = InlineKeyboardMarkup()
    lang_keyboard.add(
        InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton("üáÆüá± ◊¢◊ë◊®◊ô◊™", callback_data="lang_he"),
        InlineKeyboardButton("üá∫üá∏ English", callback_data="lang_en")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / ◊ë◊ó◊® ◊©◊§◊î / Choose language:", reply_markup=lang_keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def set_language(call):
    lang = call.data.split("_")[1]
    user_languages[call.from_user.id] = lang
    show_main_menu(call.message.chat.id, lang)

def show_main_menu(chat_id, lang, edit=False, message_id=None):
    texts = {
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        "he": "◊ë◊ó◊® ◊ê◊§◊©◊®◊ï◊™:",
        "en": "Choose an option:"
    }
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq"))
    keyboard.add(InlineKeyboardButton("‚úç –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="ask"))
    if edit:
        bot.edit_message_text(texts[lang], chat_id, message_id, reply_markup=keyboard)
    else:
        bot.send_message(chat_id, texts[lang], reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == "faq")
def show_faq(call):
    send_faq_page(call.message.chat.id, 0, user_languages.get(call.from_user.id, "ru"))

def send_faq_page(chat_id, page, lang):
    faqs = base_faqs + user_questions
    if page >= len(faqs):
        bot.send_message(chat_id, "–ë–æ–ª—å—à–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤." if lang == "ru" else "No more questions.")
        return
    faq = faqs[page]
    text = f"Q: {faq['question']}\nA: {faq['answer']}"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üëç –ú–Ω–µ –ø–æ–º–æ–≥–ª–æ", callback_data=f"like_{page}"))
    if page + 1 < len(faqs):
        keyboard.add(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"faq_page:{page+1}"))
    keyboard.add(InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="menu"))
    bot.send_message(chat_id, text, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("faq_page:"))
def paginate_faq(call):
    page = int(call.data.split(":")[1])
    send_faq_page(call.message.chat.id, page, user_languages.get(call.from_user.id, "ru"))

@bot.callback_query_handler(func=lambda call: call.data.startswith("like_"))
def like_faq(call):
    index = int(call.data.split("_")[1])
    faq_likes[index] = faq_likes.get(index, 0) + 1
    bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")

@bot.callback_query_handler(func=lambda call: call.data == "ask")
def ask_question(call):
    lang = user_languages.get(call.from_user.id, "ru")
    prompt = {"ru": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", "he": "◊õ◊™◊ï◊ë ◊ê◊™ ◊©◊ê◊ú◊™◊ö:", "en": "Please type your question:"}[lang]
    msg = bot.send_message(call.message.chat.id, prompt)
    bot.register_next_step_handler(msg, receive_question)

def receive_question(msg):
    question = msg.text
    lang = user_languages.get(msg.from_user.id, "ru")
    try:
        response = model.generate_content(question)
        ai_answer = response.text.strip()
    except Exception as e:
        ai_answer = {
            "ru": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
            "he": "◊ê◊ô◊®◊¢◊î ◊©◊í◊ô◊ê◊î ◊ë◊¢◊™ ◊ß◊ë◊ú◊™ ◊™◊©◊ï◊ë◊î.",
            "en": "An error occurred while getting a response."
        }[lang]
    user_questions.append({"question": question, "answer": ai_answer})
    bot.send_message(msg.chat.id, f"{ai_answer}")
    show_main_menu(msg.chat.id, lang)

@bot.callback_query_handler(func=lambda call: call.data == "menu")
def back_to_menu(call):
    lang = user_languages.get(call.from_user.id, "ru")
    show_main_menu(call.message.chat.id, lang, edit=True, message_id=call.message.message_id)

bot.polling(none_stop=True)
